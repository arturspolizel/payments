// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	model "github.com/arturspolizel/payments/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PaymentController is an autogenerated mock type for the PaymentController type
type PaymentController struct {
	mock.Mock
}

// Authorize provides a mock function with given fields: _a0
func (_m *PaymentController) Authorize(_a0 model.Payment) (uint, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Payment) (uint, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(model.Payment) uint); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(model.Payment) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Capture provides a mock function with given fields: id, amount, tips
func (_m *PaymentController) Capture(id uint, amount int, tips int) error {
	ret := _m.Called(id, amount, tips)

	if len(ret) == 0 {
		panic("no return value specified for Capture")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, int, int) error); ok {
		r0 = rf(id, amount, tips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: _a0
func (_m *PaymentController) Create(_a0 model.Payment) (uint, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Payment) (uint, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(model.Payment) uint); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(model.Payment) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *PaymentController) Get(_a0 uint) (model.Payment, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (model.Payment, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) model.Payment); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.Payment)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: startId, pageSize, startDate, endDate
func (_m *PaymentController) List(startId uint, pageSize uint, startDate time.Time, endDate time.Time) ([]model.Payment, error) {
	ret := _m.Called(startId, pageSize, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, time.Time, time.Time) ([]model.Payment, error)); ok {
		return rf(startId, pageSize, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, time.Time, time.Time) []model.Payment); ok {
		r0 = rf(startId, pageSize, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, time.Time, time.Time) error); ok {
		r1 = rf(startId, pageSize, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refund provides a mock function with given fields: id, amount, tips
func (_m *PaymentController) Refund(id uint, amount int, tips int) error {
	ret := _m.Called(id, amount, tips)

	if len(ret) == 0 {
		panic("no return value specified for Refund")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, int, int) error); ok {
		r0 = rf(id, amount, tips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Void provides a mock function with given fields: id
func (_m *PaymentController) Void(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Void")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentController creates a new instance of PaymentController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentController(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentController {
	mock := &PaymentController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
