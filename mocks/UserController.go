// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	model "github.com/arturspolizel/payments/pkg/auth/model"
	mock "github.com/stretchr/testify/mock"
)

// UserController is an autogenerated mock type for the UserController type
type UserController struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *UserController) Create(_a0 model.User, _a1 string) (uint, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(model.User, string) (uint, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(model.User, string) uint); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(model.User, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *UserController) Get(_a0 uint) (model.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (model.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) model.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: user, password
func (_m *UserController) Login(user string, password string) (string, error) {
	ret := _m.Called(user, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(user, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(user, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(user, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: code
func (_m *UserController) Validate(code string) error {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserController creates a new instance of UserController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserController(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserController {
	mock := &UserController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
