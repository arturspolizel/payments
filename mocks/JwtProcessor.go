// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	utils "github.com/arturspolizel/payments/utils"
	mock "github.com/stretchr/testify/mock"
)

// JwtProcessor is an autogenerated mock type for the JwtProcessor type
type JwtProcessor struct {
	mock.Mock
}

// NewToken provides a mock function with given fields: _a0
func (_m *JwtProcessor) NewToken(_a0 utils.TokenContext) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NewToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TokenContext) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TokenContext) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(utils.TokenContext) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: _a0
func (_m *JwtProcessor) Validate(_a0 string) (utils.TokenContext, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 utils.TokenContext
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (utils.TokenContext, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) utils.TokenContext); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(utils.TokenContext)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJwtProcessor creates a new instance of JwtProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJwtProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *JwtProcessor {
	mock := &JwtProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
