// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	model "github.com/arturspolizel/payments/model"
	mock "github.com/stretchr/testify/mock"
)

// MerchantRepository is an autogenerated mock type for the MerchantRepository type
type MerchantRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: payment
func (_m *MerchantRepository) Create(payment model.Merchant) uint {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(model.Merchant) uint); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *MerchantRepository) Get(id uint) model.Merchant {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Merchant
	if rf, ok := ret.Get(0).(func(uint) model.Merchant); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Merchant)
	}

	return r0
}

// NewMerchantRepository creates a new instance of MerchantRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMerchantRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MerchantRepository {
	mock := &MerchantRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
